Parameters:
  AWSS3BUCKET:
    Type: String
    Description: "S3 Bucket where Lambda deployment packages are stored"
  HOST:
    Type: String
    Description: "Database host"
  USER:
    Type: String
    Description: "Database user"
  PASSWORD:
    Type: String
    Description: "Database password"
  DATABASE:
    Type: String
    Description: "Database name"
  SECURITYGROUP:
    Type: String
    Description: "Security Group ID for Lambda functions"
  SUBNETIDSPARAM:
    Type: CommaDelimitedList
    Description: Lista de Subnets

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"


  GetPersonLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: GetPersonLambda
      Runtime: nodejs18.x
      Code:
        # S3Key: ${AWSS3BUCKET}/lambda-artifacts/lambda-post.zip
        S3Bucket: !Ref AWSS3BUCKET
        S3Key: lambda-artifacts/test.zip
      Environment:
        Variables:
          host: !Ref HOST
          user: !Ref USER
          password:   !Ref PASSWORD
          database: !Ref DATABASE
      VpcConfig:
        SecurityGroupIds:
          - !Ref SECURITYGROUP  # Debes definir este security group en tus resources
        SubnetIds:  !Ref SUBNETIDSPARAM

  PostPersonLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handler-create-person.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: PostPersonLambda
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref AWSS3BUCKET
        S3Key: lambda-artifacts/test-two.zip
      Environment:
        Variables:
          host: !Ref HOST
          user: !Ref USER
          password:   !Ref PASSWORD
          database: !Ref DATABASE
      VpcConfig:
        SecurityGroupIds:
          - !Ref SECURITYGROUP  # Debes definir este security group en tus resources
        SubnetIds:  !Ref SUBNETIDSPARAM

  PersonsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PersonsAPI

  PersonsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PersonsApi
      ParentId: !GetAtt [PersonsApi, RootResourceId]
      PathPart: persons

  GetPersonsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref PersonsResource
      RestApiId: !Ref PersonsApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPersonLambda.Arn}/invocations
            - Region: ${AWS::Region}
      MethodResponses:
        - StatusCode: 200

  PostPersonsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref PersonsResource
      RestApiId: !Ref PersonsApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostPersonLambda.Arn}/invocations
            - Region: ${AWS::Region}
      MethodResponses:
        - StatusCode: 201

  LambdaInvokePermissionGet:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetPersonLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PersonsApi}/*/GET/persons"

  LambdaInvokePermissionPost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostPersonLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PersonsApi}/*/POST/persons"

  PersonsApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref PersonsApi
      StageName: prod
      DeploymentId: !Ref PersonsApiDeployment

  PersonsApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPersonsMethod
      - PostPersonsMethod
    Properties:
      RestApiId: !Ref PersonsApi
