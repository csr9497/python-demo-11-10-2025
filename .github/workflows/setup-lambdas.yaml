name: Setup AWS Lamnbdas and deploy api 

on:
  push:
    paths:
      - lambdas/**
      - .github/workflows/*
  workflow_run:
    workflows: ["Setup AWS and Deploy CloudFormation Stack"]  # El nombre definido en 'name:' del otro workflow
    types:
      - completed

jobs:

  deploy-lambda:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install TypeScript globally
        run: npm install -g typescript

      - name : Install JS dependencies
        run: |
           npm install

      - name: Zip Lambda function
        run: |
          mkdir lambdas-zipped
          cd lambdas
          for d in */ ; do
            ./${d}build.sh $d
          done


      - name: Create S3 bucket (if not exists) 
        env:
          AWS_S3_BUCKET: ${{ secrets.LAMBDA_ARTIFACT_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }} 
        run: |
          if aws s3api head-bucket --bucket "$AWS_S3_BUCKET" 2>/dev/null; then
            echo "Bucket $AWS_S3_BUCKET already exists."
          else
            aws s3api create-bucket --bucket "$AWS_S3_BUCKET" --region "$AWS_REGION" \
              --create-bucket-configuration LocationConstraint="$AWS_REGION"
            echo "Bucket $AWS_S3_BUCKET created."
          fi

      - name: Upload zip to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl private
        env:
          AWS_S3_BUCKET: ${{ secrets.LAMBDA_ARTIFACT_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: ./lambdas-zipped          # Root (will look for lambda.zip)
          DEST_DIR: lambda-artifacts

      - name: Descargar artifact
        uses: actions/download-artifact@v4
        with:
          name: mensaje-params
          path: mensaje.json

      - name: Leer archivo de variables
        run: |
          for key in $(jq -r 'keys[]' mensaje.json); do
            value=$(jq -r --arg k "$key" '.[$k]' mensaje.json)
            echo "$key=$value" >> $GITHUB_ENV
          done

            # Prueba: mostrar variables ya exportadas
            echo "HOST: $HOST"
            echo "USER: $USER"
            echo "PASSWORD: $PASSWORD"
            echo "DATABASE: $DATABASE"
            echo "SECURITY_GROUP: $SECURITY_GROUP"
            echo "SUBNETIDS: $SUBNETIDS"

            

      - name: Create Lambda functions and API GatewayId
        run: |
          aws cloudformation deploy \
            --template-file Iac/api.yaml \
            --stack-name lambda-api-stack-$(date +%Y%m%d%H%M%S) \
            --parameter-overrides AWSS3BUCKET=${{ secrets.LAMBDA_ARTIFACT_BUCKET }} HOST=$HOST USER=$USER PASSWORD=$PASSWORD DATABASE=$DATABASE SECURITY_GROUP=$SECURITY_GROUP SUBNETIDS=$SUBNETIDS  \
            --capabilities CAPABILITY_NAMED_IAM

      # Update this or the next step as needed for CloudFormation deployment
