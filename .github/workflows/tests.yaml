name: Tests lambdas and API
on:
    workflow_run:
      workflows: ["Setup AWS and Deploy CloudFormation Stack v2"]
      types:
        - completed
jobs:
  test-lambdas:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Descargar mensaje-two.json de S3
        run: |
          aws s3 cp s3://${{ secrets.LAMBDA_ARTIFACT_BUCKET }}/mensaje-two.json ./mensaje-two.json
          
      - name: Leer archivo 
        run: | 
          cat ./mensaje-two.json

      - name: Leer archivo de variables
        run: |
          for key in $(jq -r 'keys[]' ./mensaje-two.json); do
              value=$(jq -r --arg k "$key" '.[$k]' ./mensaje-two.json)
            echo "$key=$value" >> $GITHUB_ENV
          done

            # Prueba: mostrar variables ya exportadas
            echo "HOST: $HOST"
            echo "USERDB: $USERDB"
            echo "PASSWORD: $PASSWORD"
            echo "DATABASE: $DATABASE"
            echo "DBTABLE: $DBTABLE"
            echo "SECURITYGROUP: $SECURITYGROUP"
            echo "SUBNETIDS: $SUBNETIDS"
            echo "RUN_ID: $RUN_ID"
            echo "RUN_ID_LAMBDA: $RUN_ID_LAMBDA"
            echo "APIURL: $APIURL"

      - name: List archivos y directorio
        run: |
          pwd
          ls -l
          ls -l lambda-tests/

      - name: Ejecuta tests de Lambda desde archivos
        run: |
          for testfile in lambda-tests/*.json; do
            FUNC_NAME=$(basename "$testfile" .json)
            echo "Probando funciÃ³n $FUNC_NAME con payload de $testfile"
            aws lambda invoke \
              --cli-binary-format raw-in-base64-out \
              --function-name "$FUNC_NAME" \
              --payload file://"$testfile" \
              "output_$FUNC_NAME.json" || echo "Error invocando $FUNC_NAME"
            echo "Output de $FUNC_NAME:"
            if test -f "output_$FUNC_NAME.json"; then
              cat "output_$FUNC_NAME.json"
            else
              echo "No output file generated."
            fi
            echo ""
          done

  test-api:

    runs-on: ubuntu-latest
    needs: test-lambdas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Descargar mensaje-two.json de S3
        run: |
          aws s3 cp s3://${{ secrets.LAMBDA_ARTIFACT_BUCKET }}/mensaje-two.json ./mensaje-two.json

      - name: Leer archivo 
        run: | 
          cat ./mensaje-two.json

      - name: Leer archivo de variables
        run: |
          for key in $(jq -r 'keys[]' ./mensaje-two.json); do
              value=$(jq -r --arg k "$key" '.[$k]' ./mensaje-two.json)
            echo "$key=$value" >> $GITHUB_ENV
          done

            # Prueba: mostrar variables ya exportadas
            echo "HOST: $HOST"
            echo "USERDB: $USERDB"
            echo "PASSWORD: $PASSWORD"
            echo "DATABASE: $DATABASE"
            echo "DBTABLE: $DBTABLE"
            echo "SECURITYGROUP: $SECURITYGROUP"
            echo "SUBNETIDS: $SUBNETIDS"
            echo "RUN_ID: $RUN_ID"
            echo "RUN_ID_LAMBDA: $RUN_ID_LAMBDA"
            echo "APIURL: $APIURL"

      - name: Ejecuta tests de la API (curl) desde archivos
          
        run: |
          for testfile in api-tests/*.json; do
            TEST=$(cat "$testfile")
            ENDPOINT=$(echo "$TEST" | jq -r .path)
            METHOD=$(echo "$TEST" | jq -r .method)
            BODY=$(echo "$TEST" | jq -c .body)
            OUT_FILE="output_$(basename "$testfile" .json).txt"
            
            echo "Test: $testfile ($METHOD $APIURL$ENDPOINT)"
            
            if [ "$BODY" != "null" ]; then
              curl -X "$METHOD" "$APIURL$ENDPOINT" -H "Content-Type: application/json" -d "$BODY" -s -w "\n" > "$OUT_FILE"
            else
              curl -X "$METHOD" "$APIURL$ENDPOINT" -s -w "\n" > "$OUT_FILE"
            fi

            echo "Respuesta:"
            cat "$OUT_FILE"
            echo ""
          done

  destroy:
    runs-on: ubuntu-latest 
    needs: test-api
    permissions:
      contents: write
      pull-requests: write
    if: github.branches == 'develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Descargar mensaje-two.json de S3
        run: |
          aws s3 cp s3://${{ secrets.LAMBDA_ARTIFACT_BUCKET }}/mensaje-two.json ./mensaje-two.json

      - name: Leer archivo 
        run: | 
          cat ./mensaje-two.json

      - name: Leer archivo de variables
        run: |
          for key in $(jq -r 'keys[]' ./mensaje-two.json); do
              value=$(jq -r --arg k "$key" '.[$k]' ./mensaje-two.json)
            echo "$key=$value" >> $GITHUB_ENV
          done

            # Prueba: mostrar variables ya exportadas
            echo "HOST: $HOST"
            echo "USERDB: $USERDB"
            echo "PASSWORD: $PASSWORD"
            echo "DATABASE: $DATABASE"
            echo "DBTABLE: $DBTABLE"
            echo "SECURITYGROUP: $SECURITYGROUP"
            echo "SUBNETIDS: $SUBNETIDS"
            echo "RUN_ID: $RUN_ID"
            echo "RUN_ID_LAMBDA: $RUN_ID_LAMBDA"
            echo "APIURL: $APIURL"

      - name: Delete Lambda and API Stack
        run: |
          aws cloudformation delete-stack --stack-name $RUN_ID_LAMBDA

      - name: Delete Main Stack
        run: |
          aws cloudformation delete-stack --stack-name $RUN_ID
          
      - name: Wait for stacks to be deleted
        run: |
          aws cloudformation wait stack-delete-complete --stack-name $RUN_ID_LAMBDA
          aws cloudformation wait stack-delete-complete --stack-name $RUN_ID
          
      - name: Confirm deletion
        run: |
          echo "Stacks $RUN_ID_LAMBDA and $RUN_ID have been deleted."

      - name: automerge
        uses: "pascalgn/automerge-action@v0.16.4"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: feedback
        if: ${{ steps.automerge.outputs.mergeResult == 'merged' }}
        run: |
          echo "Pull request ${{ steps.automerge.outputs.pullRequestNumber }} merged!"
